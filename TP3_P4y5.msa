*****************************************************************************************************************
*		TP3	EJERCICIOS 4 y 5		GRUPO B 4						*
*														*
* Consigna:													*
*	Escribir la subrutina get_author. La misma recibe el número de inventario de un libro y			*
* devuelve un puntero al autor del libro y la cantidad de caracteres que contiene el nombre. Se			*
* pide que la función reciba por el registro A el número de inventario, devuelva por IX el			*
* puntero y por el registro A la cantidad de caracteres del autor. Si el número de inventario no		*
* coincide con uno existente en la biblioteca se debe encender el flag de carry.				*
* Se pide modularidad y claridad en la documentación.								*
*****************************************************************************************************************
	p68h11

*********************************************************
*		ZONA DE CONSTANTES			*
* Se definen los valores numericos constantes utilizados*
* a lo largo del programa.				*
*********************************************************

CAN_LIB	EQU	20		Cantidad de libros en el arreglo 'BIBLIO'
INPUT	EQU	17		Valor de inventario a buscar en el arreglo

*********************************************************
*		ESTRUCTURA DE DATOS			*
* Se define la estructura 'LIBRO'			*
*********************************************************
        ORG     0
LIBRO   EQU     *
autor   rmb     20		nombre del autor
invent	rmb     1		número de inventario
tema    rmb     5		tema del libro
EL_SIZE EQU     *-LIBRO   	tamaño de cada elemento


******************************************************
*                   MAIN                             *
******************************************************

       	ORG	$2000	

MAIN	EQU     *
        lds     #stackp		inicia el stack pointer

	ldaa	#INPUT		cargo el valor del inventario a buscar
	psha
	ldx	#biblio		cargo la dirección de memoria inicial del arreglo biblio
	pshx
	ldaa	#invent		cargo el tamaño del nombre del autor de la estructura 'LIBRO' en bytes
	psha
	ldaa	#EL_SIZE	cargo el tamaño total de cada elemento del arreglo biblio en bytes
	psha
	ldx	#limit		cargo la dirección de la última posición del arreglo
	pshx


        jsr     getauth		ejecuto la subrutina getauth
	
	puly			libero 7 bytes del stack	
	puly
	puly
	ins

fin     bra     fin

*****************************************************************************************
*               		SUBROUTINE: GETAUTH					*
* Objetivo: Obtener la posición y la cantidad de caracteres del nombre de autor de un 	*
* 	arreglo de libros basados en la estructura 'LIBRO', conociendo el número de	*
*	inventario del libro a buscar							*
* Outputs:										*
* 	1) Posición del primer caracter del nombre del autor (Vía registro IX)		*
* 	2) Cantidad de caracteres del nombre del autor (Vía registro A)			*
* Inputs (Parámetros de entrada, deben ser pasados a través del stack):			*
*	1) Valor de inventario a buscar en el arreglo [1 byte]				*
* 	2) Dirección de memoria inicial del arreglo de libros [2 bytes]			*
*	3) Tamaño máximo del nombre del autor de la estructura libro [1 byte]		*
*	4) Tamaño total de la estructura 'LIBRO' (en bytes) [1 byte]			*
*	5) Dirección de memoriade la última posición del arreglo de libros [2 bytes]	*
*											*
* Consideraciones:									*
* 	- Después de invocar la subrutina, se deben liberar 7 bytes del stack		*
*       - En caso de error (no se encontró el elemento), devuelve el carry en 1		*
*****************************************************************************************
* [B]
* [Y H] 0<- (Y)
* [Y L] 1
* [PC H] 2
* [PC L] 3
* [limit H] 4
* [limit L] 5
* [EL_SIZE] 6
* [invent] 7
* [biblio H] 8
* [biblio L] 9
* [INPUT] 10

	ORG	$2100

getauth EQU     *               hace backup de los registros modificados durante la subrutina
	pshy
	tsy
	pshb

get_inv EQU     *               ; sección donde se obtiene la ubicación del inventario deseado
        ldx     8,y         	; cargo x con el inicio del arreglo (primer libro)
        ldab    7,y		; cargo B con el tamaño del nombre del autor y lo sumo con X 
        abx                     ; para apuntar al primer inventario
	ldaa	10,y		 ; Recupero el valor del inventario deseado mediante el stack
comp	cmpa    0,X             ; comparo el Registo A (inventario deseado) con el inventario apuntado
        beq     cont_ch         ; si lo encontré, voy a contar la cant. de caracteres del nombre
        ldab    6,y        	; si no es igual, voy al próximo inventario
        abx                     ; añadiendole al puntero la cantidad que ocupa un libro entero
        cpx     4,y          	; me fijo si estoy dentro del arreglo
        bmi     comp            ; si lo estoy, repito el ciclo
        sec			; si no lo estoy, pongo el carry en 1 y salgo
        bra     salir		

cont_ch EQU     *
	ldaa	7,y
	jsr	sub_ax		; trasladamos el puntero X desde el inventario deseado hasta 
*				; el primer caracter del autor

	stx	8,y             ; envío el puntero del nombre del autor al stack sobreescribiendo biblio


termin	equ	*		; búsqueda del terminador
	ldab	7,y		; repeticiones del contador (caracteres máximos del nombre de autor)
	clra                    ; vacío el contador (Registro A = 0)
repite	equ	*
        tst     0,X             ; Comparo el caracter apuntado con el terminador
        beq     salir           ; si lo es, salgo
        inca                    ; si no lo es, incremento el contador (siguiente caracter)
        inx                     ; apunto al próximo elemento	

	decb			
	bne	repite		; si la cantidad de ciclos restantes no es cero

salir   EQU     *
	ldx	8,y		; recupero el valor de X (puntero del nombre del autor)
*				; 
	pulb
	puly
        rts                     ; salgo de la subrutina

*****************************************************************************************
*		SUBRUTINA sub_ax							*
* Objetivo: Sustraer el valor del registro A de IX (IX = IX - A)			*
* 											*
* Aclaración: 										*
*    No recibe ni devuelve valores por stack						*
*    Utilizamos esta subrutina para restar un número de 1 byte de un número de 2 bytes	*
*****************************************************************************************
	ORG	$2400
sub_ax	EQU	*
	pshb		backup de B
	pshy		backup de Y

	psha		cargo A en el stack (tipo variable local)
	clra		borro A para
	psha		crear un espacio vacio en la siguiente pos del stack
	
	tsy		X=SP+1
	
	xgdx		X<-->D
	subd	0,y
	xgdx		X<-->D
	
	ins		libero 2 bytes del stack
	ins
	puly		recupero backups de IY,B
	pulb		
	rts		retorno de la subrutina

******************************************************
*                                                    *
*               DEFINICIÓN DEL STACK                 *
*          Con 30 posiciones es suficiente           *
******************************************************

	ORG	$3600
stack   rmb     30
stackp  EQU     *-1

******************************************************
*                                                    *
*               ARREGLO BIBLIO	                     *
*      Reservamos las posiciones de memoria  	     *
*	que serán ocupadas por el arreglo            *
******************************************************
	ORG	$3000
biblio  rmb     CAN_LIB*EL_SIZE       	; Tamaño del Arreglo = Cantidad de libros * Tamaño de Libros
limit   EQU     *-1                     ; Última posición del arreglo


*********************************************************
*		DATOS A MODO DE EJEMPLO			*
* Cargamos algunos datos en el arreglo para pruebas	*
*********************************************************

	ORG	$3000
autor1	FCC	'JULIO CORTAZAR'
	FCB	0

	ORG	$3000+invent
	FCB	13

	ORG	$3000+EL_SIZE
autor2	FCC	'PABLO NERUDA'
	FCB	0

	ORG	$3000+EL_SIZE+invent
	FCB	44

	END